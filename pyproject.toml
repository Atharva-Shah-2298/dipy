[project]
name = "dipy"
license = {file = "LICENSE"}
description = "Diffusion MRI Imaging in Python"
authors = [{ name = "Elefterios Garyfallidis", email = "neuroimaging@python.org" }]
maintainers = [
    {name = "dipy developers", email="dipy@python.org"},
]
keywords = ["dipy", "diffusionimaging", "dti", "tracking", "tractography",
            "diffusionmri", "mri", "tractometry", "connectomics", "brain",
            "dipymri", "microstructure", "deeplearning", "registration",
            "segmentations", "simulation", "medical", "imaging", "brain",
            "machinelearning", "signalprocessing"]
requires-python = ">=3.8"
dependencies = [
    "cython>=0.29.24, !=0.29.29",
    "numpy>=1.14.5",
    "scipy>=1.1",
    "nibabel>=3.0.0",
    "h5py>=2.8.0",
    "packaging>=19.0",
    "tqdm>=4.30.0",
]
readme = "README.rst"
classifiers = [
    'Development Status :: 4 - Beta',
    'Environment :: Console',
    'Intended Audience :: Developers',
    'Intended Audience :: Science/Research',
    'License :: OSI Approved :: BSD License',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3 :: Only',
    "Topic :: Software Development :: Libraries",
    'Topic :: Scientific/Engineering',
    'Operating System :: Microsoft :: Windows',
    'Operating System :: POSIX',
    'Operating System :: Unix',
    'Operating System :: MacOS',
]
dynamic = ['version']


[project.optional-dependencies]
test = [
    "pytest",
    "coverage",
    "coveralls",
    "codecov",
]
doc = [
    "cython",
    "numpy",
    "scipy",
    "nibabel>=3.0.0",
    "h5py",
    "h5py<3.0.0; sys_platform == 'win32'",
    "cvxpy",
    "pandas",
    "tables",
    "matplotlib",
    "fury>=0.8.0",
    "scikit-learn",
    "scikit-image",
    "statsmodels",
    "boto3"

]
viz = [
    "fury>=0.8.0",
    "matplotlib"
]
ml = [
    "scikit_learn",
    "pandas",
    "statsmodels",
    "tables",
    "tensorflow"
]

all = [
]


[project.urls]
homepage = "https://dipy.org"
documentation = "https://dipy.org/documentation/latest/documentation/"
source = "https://github.com/dipy/dipy"
download = "https://pypi.org/project/dipy/#files"
tracker = "https://github.com/dipy/dipy/issues"

[build-system]
build-backend = "mesonpy"
requires = [
    "meson-python>=0.9.0",
    "Cython>=0.29.32",
    "packaging>19.0",
    # `wheel` is needed for non-isolated builds, given that `meson-python`
    # doesn't list it as a runtime requirement (at least in 0.10.0)
    # See https://github.com/FFY00/meson-python/blob/main/pyproject.toml#L4
    "wheel",


    # We follow scipy for much of these pinnings
    # https://github.com/scipy/scipy/blob/main/pyproject.toml
    #
    # NumPy dependencies - to update these, sync from
    # https://github.com/scipy/oldest-supported-numpy/, and then
    # update minimum version to match our install_requires min version
    # ----------------------------------------------------------------

    # now matches minimum supported version, keep here as separate requirement
    # to be able to sync more easily with oldest-supported-numpy
    "numpy==1.19.5; python_version=='3.8' and platform_machine=='aarch64' and platform_python_implementation != 'PyPy'",

    # arm64 on Darwin supports Python 3.8 and above requires numpy>=1.21.0
    # (first version with arm64 wheels available)
    "numpy==1.21.0; python_version=='3.8' and platform_machine=='arm64' and platform_system=='Darwin'",
    "numpy==1.21.0; python_version=='3.9' and platform_machine=='arm64' and platform_system=='Darwin'",

    # loongarch64 requires numpy>=1.22.0
    "numpy==1.22.0; platform_machine=='loongarch64'",

    # On Windows we need to avoid 1.21.6, 1.22.0 and 1.22.1 because they were
    # built with vc142. 1.22.3 is the first version that has 32-bit Windows
    # wheels *and* was built with vc141. So use that:
    "numpy==1.22.3; python_version=='3.10' and platform_system=='Windows' and platform_python_implementation != 'PyPy'",

    # default numpy requirements
    "numpy==1.19.5; python_version=='3.8' and (platform_machine!='arm64' or platform_system!='Darwin') and platform_machine!='aarch64' and platform_machine!='loongarch64' and platform_python_implementation != 'PyPy'",
    "numpy==1.19.5; python_version=='3.9' and (platform_machine!='arm64' or platform_system!='Darwin') and platform_machine!='loongarch64' and platform_python_implementation != 'PyPy'",
    # Note that 1.21.3 was the first version with a complete set of 3.10 wheels,
    # however macOS was broken and it's safe C API/ABI-wise to build against 1.21.6
    # (see oldest-supported-numpy issues gh-28 and gh-45)
    "numpy==1.21.6; python_version=='3.10' and (platform_system!='Windows' and platform_machine!='loongarch64') and platform_python_implementation != 'PyPy'",
    "numpy==1.23.2; python_version=='3.11' and platform_python_implementation != 'PyPy'",

    # For Python versions which aren't yet officially supported,
    # we specify an unpinned NumPy which allows source distributions
    # to be used and allows wheels to be used as soon as they
    # become available.
    "numpy; python_version>='3.12'",
    "numpy; python_version>='3.8' and platform_python_implementation=='PyPy'",
]

[tool.devpy]
package = 'dipy'

[tool.devpy.commands]
"Build" = ["devpy.build", "devpy.test"]
"Environments" = ["devpy.shell", "devpy.ipython", "devpy.python"]
# TODO: Add custom commands
#"Documentation" = [".devpy/cmds.py:docs"]
#"Metrics" = [".devpy/cmds.py:asv", ".devpy/cmds.py:coverage"]